{"ast":null,"code":"var _jsxFileName = \"/Users/imac20/Desktop/ProjetoCurso/web/src/App.js\";\nimport React from 'react';\nimport { ThemeContext, themes } from './Context/theme-context';\nimport ThemedButton from './Context/themed-button'; // Um componente intermediário que usa componente ThemedButton\n\nfunction Toolbar(props) {\n  return React.createElement(ThemedButton, {\n    onClick: props.changeTheme,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Change Theme\");\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: themes.light\n    };\n\n    this.toggleTheme = () => {\n      this.setState(state => ({\n        theme: state.theme === themes.dark ? themes.light : themes.dark\n      }));\n    };\n  }\n\n  render() {\n    // O ThemedButton button dentro de ThemeProvider\n    // usa o tema do estado enquanto os demais usam\n    // o tema padrão dark\n    return React.createElement(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(ThemeContext.Provider, {\n      value: this.state.theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      changeTheme: this.toggleTheme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(Section, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(ThemedButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/imac20/Desktop/ProjetoCurso/web/src/App.js"],"names":["React","ThemeContext","themes","ThemedButton","Toolbar","props","changeTheme","App","Component","constructor","state","theme","light","toggleTheme","setState","dark","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,yBAArC;AACA,OAAOC,YAAP,MAAyB,yBAAzB,C,CAEA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SACE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEA,KAAK,CAACC,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF;AAKD;;AAED,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACJ,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKK,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAET,MAAM,CAACU;AADH,KAAb;;AAIA,SAAKC,WAAL,GAAmB,MAAM;AACvB,WAAKC,QAAL,CAAcJ,KAAK,KAAK;AACtBC,QAAAA,KAAK,EACHD,KAAK,CAACC,KAAN,KAAgBT,MAAM,CAACa,IAAvB,GACIb,MAAM,CAACU,KADX,GAEIV,MAAM,CAACa;AAJS,OAAL,CAAnB;AAMD,KAPD;AAQD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,WAAW,EAAE,KAAKE,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CADF;AAUD;;AA/B+B;;AAkClC,eAAeN,GAAf","sourcesContent":["import React from 'react';\n\nimport { ThemeContext, themes } from './Context/theme-context';\nimport ThemedButton from './Context/themed-button';\n\n// Um componente intermediário que usa componente ThemedButton\nfunction Toolbar(props) {\n  return (\n    <ThemedButton onClick={props.changeTheme}>\n      Change Theme\n    </ThemedButton>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: themes.light,\n    };\n\n    this.toggleTheme = () => {\n      this.setState(state => ({\n        theme:\n          state.theme === themes.dark\n            ? themes.light\n            : themes.dark,\n      }));\n    };\n  }\n\n  render() {\n    // O ThemedButton button dentro de ThemeProvider\n    // usa o tema do estado enquanto os demais usam\n    // o tema padrão dark\n    return (\n      <Page>\n        <ThemeContext.Provider value={this.state.theme}>\n          <Toolbar changeTheme={this.toggleTheme} />\n        </ThemeContext.Provider>\n        <Section>\n          <ThemedButton />\n        </Section>\n      </Page>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}